!pip install tflearn
!pip install ipympl
import tflearn
import os
import cv2
import shutil
from random import shuffle
from tqdm import tqdm
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression
from PIL import Image, ImageOps
import tensorflow.compat.v1 as tf

# Set the right path to the data
path_var_train = '/content/drive/MyDrive/ai_train/' 
#count the number of images in the folder
path_train, dirs_train, files_train = next(os.walk(path_var_train))
number_images_train = len(files_train)
print(number_images_train)
print(files_train)


# Set the right path to the data
path_var_tst = '/content/drive/MyDrive/ai_test/' 
#count the number of images in the folder
path_tst, dirs_tst, files_tst = next(os.walk(path_var_tst))
number_images_tst = len(files_tst)
print(number_images_tst)
files_tst


MODEL_NAME = 'X_rays'
IMG_SIZE = 224
LR = 0.001
def create_label(image_name):
    """ Create an one-hot encoded vector from image name """
    label = image_name.split('.')[-3]
    if label == 'Cofield':
        return np.array([1,0,0,0])
    elif label == 'Depuy':
        return np.array([0,1,0,0])
    elif label== 'Tornier':
        return np.array([0,0,1,0])
    elif label == 'Zimmer':
        return np.array([0,0,0,1])


def create_train_data():
    training_data = []
    for img in tqdm(os.listdir(path_var_train)):
        path = os.path.join(path_var_train, img)
        img_data = cv2.imread(path, 0)
        img_data = cv2.resize(img_data, (IMG_SIZE, IMG_SIZE))
        training_data.append([np.array(img_data), create_label(img)])
    shuffle(training_data)
    np.save('train_data.npy', training_data)
    return training_data

def create_test_data():
    testing_data= []
    for img in tqdm(os.listdir(path_var_tst)):
        path = os.path.join(path_var_tst, img)
        img_data = cv2.imread(path, 0)
        img_data = cv2.resize(img_data, (IMG_SIZE, IMG_SIZE))
        testing_data.append([np.array(img_data),create_label(img)])
    shuffle(testing_data)
    return testing_data       

if (os.path.exists('train_data.npy')): # If you have already created the dataset:
    train_data =np.load('train_data.npy',allow_pickle=True)
    
else: # If dataset is not created:
    train_data = create_train_data()

if (os.path.exists('test_data.npy')):
    test_data =np.load('test_data.npy')
else:
    test_data = create_test_data()


train = train_data
X = np.array([i[0] for i in train]).reshape(-1, 224, 224, 1)
Y = [i[1] for i in train]

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20,shuffle=True)

#tf.reset_default_graph()
conv_input = input_data(shape=[None, 224, 224, 1], name='input')

conv1 = conv_2d(conv_input, 32, 3, activation='relu')
pool1 = max_pool_2d(conv1, 3)

conv2 = conv_2d(pool1, 64, 3, activation='relu')
pool2 = max_pool_2d(conv2, 3)

conv3 = conv_2d(pool2, 128, 3, activation='relu')
pool3 = max_pool_2d(conv3, 3)

#conv4 = conv_2d(pool3, 256, 3, activation='relu')
#pool4 = max_pool_2d(conv4, 3)

fully_layer = fully_connected(pool3, 265, activation='relu')
fully_layer = dropout(fully_layer, 0.5)
cnn_layers = fully_connected(fully_layer, 4, activation='softmax')
cnn_layers = regression(cnn_layers, optimizer='adam', learning_rate = LR, loss='categorical_crossentropy', name='targets')
model = tflearn.DNN(cnn_layers, tensorboard_dir='log', tensorboard_verbose=3)
print (X_train.shape)


if (os.path.exists('model.tfl.meta')):
    model.load('./model.tfl')
else:
    model.fit({'input': X_train}, {'targets': y_train}, n_epoch=10,
              validation_set=({'input': X_test}, {'targets': y_test} ), snapshot_step=500, show_metric=True, run_id='X_rays')
    model.save('model.tfl')

x=cv2.imread('/content/drive/MyDrive/ai_test/Cofield.56.jpg')
plt.hist(x)
print(plt.show())   

img = cv2.imread('',0)
test_img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
test_img = test_img.reshape(IMG_SIZE, IMG_SIZE, 1)
prediction = model.predict([test_img])[0]
prediction = model.predict(f"Cofield: {prediction[1,0,0,0]} , Dupuy : {prediction[0,1,0,0]} , Zimmer : {prediction[0,0,1,0]} , Tornier: {prediction[0,0,0,1]}   ") 
print(prediction)